min_size
prunetree=prune.misclass(tree_mod,best=min_size)
prune_pred=predict(prunetree,test,type="class")
table(prune_pred,test$Purchase)
tab = table(prune_pred,test$Purchase)
test_err=sum(diag(tab))/sum(tab)
test_err
tab = table(prune_pred,test$Purchase)
test_err=sum(diag(tab))/sum(tab)
test_err
df = Hitters[!which(is.na(Hitters$Salary)),]
df$Salary=log(df$Salary)
setwd("D:/SSSSS/Rutgers/data   Wrangling/finalproject")
setwd("D:/SSSSS/Rutgers/data   Minning/homework/4")
train=df[1:200,]
library(leaps)
library(ISLR)
df = Hitters[!which(is.na(Hitters$Salary)),]
df$Salary=log(df$Salary)
train=df[1:200,]
test=df[201:nrow(df),]
library(gbm)
install.packages(gbm)
install.packages('gbm')
library(gbm)
set.seed(2021)
shrink=c(0.00001,0.0001,0.001,0.01,0.1,1)
errs=rep(NA,length(shrink))
for (i in 1:length(shrink)){
boost_mod=gbm(Salary ~ ., data= train, distribution="gaussian", n.trees=1000,shrinkage = shrink[i],interaction.depth=1, n.cores=10)
pred =predict(boost_mod,newdata=train, n.trees=1000)
errs[i]=mean((pred-train$Salary)^2)
}
train=df[1:200,drop = T]
train=df[1:200,drop = F]
train=df[1:200,]
test=df[201:nrow(df),]
library(gbm)
set.seed(2021)
shrink=c(0.00001,0.0001,0.001,0.01,0.1,1)
errs=rep(NA,length(shrink))
for (i in 1:length(shrink)){
boost_mod=gbm(Salary ~ ., data= train, distribution="gaussian", n.trees=1000,shrinkage = shrink[i],interaction.depth=1, n.cores=10)
pred =predict(boost_mod,newdata=train, n.trees=1000)
errs[i]=mean((pred-train$Salary)^2)
}
library(tidyverse)
train=df[1:200,] %>% drop_na()
library(gbm)
set.seed(2021)
shrink=c(0.00001,0.0001,0.001,0.01,0.1,1)
errs=rep(NA,length(shrink))
for (i in 1:length(shrink)){
boost_mod=gbm(Salary ~ ., data= train, distribution="gaussian", n.trees=1000,shrinkage = shrink[i],interaction.depth=1, n.cores=10)
pred =predict(boost_mod,newdata=train, n.trees=1000)
errs[i]=mean((pred-train$Salary)^2)
}
library(gbm)
set.seed(2021)
shrink=c(0.00001,0.0001,0.001,0.01,0.1,1)
errs=rep(NA,length(shrink))
for (i in 1:length(shrink)){
boost_mod=gbm(Salary ~ ., data= train, distribution="gaussian", n.trees=10,shrinkage = shrink[i],interaction.depth=1, n.cores=10)
pred =predict(boost_mod,newdata=train, n.trees=1000)
errs[i]=mean((pred-train$Salary)^2)
}
library(gbm)
set.seed(2021)
shrink=c(0.00001,0.0001,0.001,0.01)
errs=rep(NA,length(shrink))
for (i in 1:length(shrink)){
boost_mod=gbm(Salary ~ ., data= train, distribution="gaussian", n.trees=1000,shrinkage = shrink[i],interaction.depth=1, n.cores=10)
pred =predict(boost_mod,newdata=train, n.trees=1000)
errs[i]=mean((pred-train$Salary)^2)
}
dim(train)
train=df[1:200,]
library(gbm)
set.seed(2021)
shrink=c(0.00001,0.0001,0.001,0.01)
errs=rep(NA,length(shrink))
for (i in 1:length(shrink)){
boost_mod=gbm(Salary ~ ., data= train, distribution="gaussian", n.trees=1000,shrinkage = shrink[i],interaction.depth=1, n.cores=10)
pred =predict(boost_mod,newdata=train, n.trees=1000)
errs[i]=mean((pred-train$Salary)^2)
}
df %>% drop_na() %>% dim()
View(df)
df = Hitters[!which(is.na(Hitters$Salary)),]
View(df)
df = Hitters[!is.na(Hitters$Salary),]
df$Salary=log(df$Salary)
View(df)
library(tidyverse)
train=df[1:200,]
test=df[201:nrow(df),]
library(gbm)
set.seed(2021)
shrink=c(0.00001,0.0001,0.001,0.01,0.1,1)
errs=rep(NA,length(shrink))
for (i in 1:length(shrink)){
boost_mod=gbm(Salary ~ ., data= train, distribution="gaussian", n.trees=1000,shrinkage = shrink[i],interaction.depth=1, n.cores=10)
pred =predict(boost_mod,newdata=train, n.trees=1000)
errs[i]=mean((pred-train$Salary)^2)
}
plot(log(shrink),errs)
set.seed(2021)
test_errs=rep(NA,length(shrink))
for (i in 1:length(shrink)){
boost_mod2=gbm(Salary~., data=H.train, distribution="gaussian",  n.trees=1000, shrinkage = shrink[i],interaction.depth=1, n.cores=10)
pred2=predict(boost_mod2,newdata=test, n.trees=1000)
test_errs[i]=mean((pred2-test$Salary)^2)
}
set.seed(2021)
test_errs=rep(NA,length(shrink))
for (i in 1:length(shrink)){
boost_mod2=gbm(Salary~., data=train, distribution="gaussian",  n.trees=1000, shrinkage = shrink[i],interaction.depth=1, n.cores=10)
pred2=predict(boost_mod2,newdata=test, n.trees=1000)
test_errs[i]=mean((pred2-test$Salary)^2)
}
plot(log(shrink),test_errs)
fit=regsubsets(Salary~.,data=train,nvmax=19)
boost.mse=errs[which.min(errs)]
fit=regsubsets(Salary~.,data=train,nvmax=19)
fit.summ=summary(fit)
to.inc=fit.summ$which[which.min(fit.summ$cp),][2:20]
features=c(features,"Division","Salary")
boost.mse=errs[which.min(errs)]
fit=regsubsets(Salary~.,data=train,nvmax=19)
fit.summ=summary(fit)
to.inc=fit.summ$which[which.min(fit.summ$cp),][2:20]
features=c("Division","Salary")
fit.lm=lm(Salary~.,data=train[,colnames(train)%in%features])
yhat=predict(fit.lm,test[,colnames(train)%in%features])
best.sub=mean((yhat-test$Salary)^2)
cols.bad=c("League","Division","NewLeague")
n.H=model.matrix(~.,H)[,-1]
boost.mse=errs[which.min(errs)]
fit=regsubsets(Salary~.,data=train,nvmax=19)
fit.summ=summary(fit)
to.inc=fit.summ$which[which.min(fit.summ$cp),][2:20]
features=c("Division","Salary")
fit.lm=lm(Salary~.,data=train[,colnames(train)%in%features])
yhat=predict(fit.lm,test[,colnames(train)%in%features])
best.sub=mean((yhat-test$Salary)^2)
cols.bad=c("League","Division","NewLeague")
n.H=model.matrix(~.,df)[,-1]
n.H.train=n.H[1:200,]
n.H.test=n.H[201:nrow(n.H),]
library(glmnet)
fit=cv.glmnet(n.H.train[,colnames(n.H)!="Sallary"],n.H.train[,"Salary"])
fit=glmnet(n.H.train[,colnames(n.H)!="Sallary"],n.H.train[,"Salary"],lambda=fit$lambda.1se)
pred=predict(fit,n.H.test[,colnames(n.H)!="Sallary"])
best.lasso=mean((pred[,1]-H.test$Salary)^2)
boost.mse=errs[which.min(errs)]
fit=regsubsets(Salary~.,data=train,nvmax=19)
fit.summ=summary(fit)
to.inc=fit.summ$which[which.min(fit.summ$cp),][2:20]
features=c("Division","Salary")
fit.lm=lm(Salary~.,data=train[,colnames(train)%in%features])
yhat=predict(fit.lm,test[,colnames(train)%in%features])
best.sub=mean((yhat-test$Salary)^2)
cols.bad=c("League","Division","NewLeague")
n.H=model.matrix(~.,df)[,-1]
n.H.train=n.H[1:200,]
n.H.test=n.H[201:nrow(n.H),]
library(glmnet)
fit=cv.glmnet(n.H.train[,colnames(n.H)!="Sallary"],n.H.train[,"Salary"])
fit=glmnet(n.H.train[,colnames(n.H)!="Sallary"],n.H.train[,"Salary"],lambda=fit$lambda.1se)
pred=predict(fit,n.H.test[,colnames(n.H)!="Sallary"])
best.lasso=mean((pred[,1]-test$Salary)^2)
boost.mse
best.sub
best.lasso
boost.mse
summary(boost_mod)
library(randomForest)
set.seed(2021)
bagging_mof=randomForest(Salary~.,data=train,mtry=20,importance=TRUE)
pred_bag=predict(bagging_mod,newdata=test)
library(randomForest)
bagging_mof=randomForest(Salary~.,data=train,mtry=20,importance=TRUE)
bagging_mof=randomForest(Salary~.,data=train,mtry=10,importance=TRUE)
pred_bag=predict(bagging_mod,newdata=test)
library(randomForest)
set.seed(2021)
bagging_mod=randomForest(Salary~.,data=train,mtry=10,importance=TRUE)
pred_bag=predict(bagging_mod,newdata=test)
mean((pred_bag-test$Salary)^2)
library(ggplot2)
library(GGally)
ggpairs(USArrests) +
theme(axis.line=element_blank(),
axis.text=element_blank(),
axis.ticks=element_blank())
hc_complete =hclust(dist(USArrests), method ="complete")
plot(hc_complete)
cut_hc <- cutree (hc_complete , 3)
result <- data.frame(states = rownames(USArrests),cluster=cut_hc,UrbanPop=USArrests$UrbanPop)
result <- resultt[order(result$cluster),]
cut_hc <- cutree (hc_complete, 3)
result <- data.frame(states = rownames(USArrests),cluster=cut_hc,UrbanPop=USArrests$UrbanPop)
result <- result[order(result$cluster),]
dotchart(result$cluster,result$states,cex = 0.7)
hc.complete.scaled =hclust(dist(data.frame(scale(USArrests,center = FALSE,scale = TRUE))), method ="complete")
plot(hc.complete.scaled)
cut.hc.scaled <- cutree(hc.complete.scaled , 3)
results.cut.scaled <- data.frame(states = rownames(USArrests),cluster=cut.hc.scaled,UrbanPop=USArrests$UrbanPop)
results.cut.scaled <- results.cut.scaled[order(results.cut.scaled$cluster),]
dotchart(results.cut.scaled$cluster,results.cut.scaled$states,cex = 0.7)
dotchart(results.cut.scaled$UrbanPop,results.cut.scaled$states,cex = 0.7)
# Non Scaled t-test for difference in urban pop between the three clusters
cluster1.urbanpop <- results.cut[result$cluster==1,"UrbanPop"]
dotchart(results.cut.scaled$UrbanPop,results.cut.scaled$states,cex = 0.7)
# Non Scaled t-test for difference in urban pop between the three clusters
cluster1.urbanpop <- result[result$cluster==1,"UrbanPop"]
cluster2.urbanpop <- result[result$cluster==2,"UrbanPop"]
cluster3.urbanpop <- result[result$cluster==3,"UrbanPop"]
t.test(cluster1.urbanpop,cluster2.urbanpop)
t.test(cluster2.urbanpop,cluster3.urbanpop)
t.test(cluster3.urbanpop,cluster1.urbanpop)
#Scaled t-test for difference in urban pop between the three clusters
cluster1.urbanpop.scaled <- results.cut.scaled[results.cut.scaled$cluster==1,"UrbanPop"]
cluster2.urbanpop.scaled <- results.cut.scaled[results.cut.scaled$cluster==2,"UrbanPop"]
cluster3.urbanpop.scaled <- results.cut.scaled[results.cut.scaled$cluster==3,"UrbanPop"]
t.test(cluster1.urbanpop.scaled,cluster2.urbanpop.scaled)
t.test(cluster2.urbanpop.scaled,cluster3.urbanpop.scaled)
t.test(cluster3.urbanpop.scaled,cluster1.urbanpop.scaled)
setwd("D:/SSSSS/Rutgers/data   Wrangling/finalproject")
setwd("D:/SSSSS/Rutgers/data   Wrangling/finalproject")
rm(list = c("AssociatedPress"))
knitr::opts_chunk$set(echo = TRUE, fig.height = 6, fig.width = 10)
head(df_250m_ex)
df_250m_ex %>% select(id, rank, title, year, genre, duration, country, description) %>%
filter(genre == 0 | duration == 0 | country == 0| description == 0)
library(tidyverse)
df_250m_ex %>% select(id, rank, title, year, genre, duration, country, description) %>%
filter(genre == 0 | duration == 0 | country == 0| description == 0)
df_250m_ex %>% select(id, rank, title, year) %>% filter(year>2019)
library(data.table)
df_250m_ex %>% count(genre, sort = T)
genres_df <- df_250m_ex %>% select(genre, imDbRating)
genres_df$Action = sapply(1:250, function(x) if (genres_df[x, 1] %like% "Action")1 else 0)
genres_df$Adventure = sapply(1:250, function(x) if (genres_df[x, 1] %like% "Adventure")1 else 0)
genres_df$Animation = sapply(1:250, function(x) if (genres_df[x, 1] %like% "Animation")1 else 0)
genres_df$Biography = sapply(1:250, function(x) if (genres_df[x, 1] %like% "Biography")1 else 0)
genres_df$Comedy = sapply(1:250, function(x) if (genres_df[x, 1] %like% "Comedy")1 else 0)
genres_df$Crime = sapply(1:250, function(x) if (genres_df[x, 1] %like% "Crime")1 else 0)
genres_df$Drama = sapply(1:250, function(x) if (genres_df[x, 1] %like% "Drama")1 else 0)
genres_df$Family = sapply(1:250, function(x) if (genres_df[x, 1] %like% "Family")1 else 0)
genres_df$Fantasy = sapply(1:250, function(x) if (genres_df[x, 1] %like% "Fantasy")1 else 0)
genres_df$FilmNoir = sapply(1:250, function(x) if (genres_df[x, 1] %like% "Film-Noir")1 else 0)
genres_df$History = sapply(1:250, function(x) if (genres_df[x, 1] %like% "History")1 else 0)
genres_df$Horror = sapply(1:250, function(x) if (genres_df[x, 1] %like% "Horror")1 else 0)
genres_df$Musical = sapply(1:250, function(x) if (genres_df[x, 1] %like% "Musical")1 else 0)
genres_df$Mystery = sapply(1:250, function(x) if (genres_df[x, 1] %like% "Mystery")1 else 0)
genres_df$Romance = sapply(1:250, function(x) if (genres_df[x, 1] %like% "Romance")1 else 0)
genres_df$SciFi = sapply(1:250, function(x) if (genres_df[x, 1] %like% "Sci-Fi")1 else 0)
genres_df$Sport = sapply(1:250, function(x) if (genres_df[x, 1] %like% "Sport")1 else 0)
genres_df$Thriller = sapply(1:250, function(x) if (genres_df[x, 1] %like% "Thriller")1 else 0)
genres_df$War = sapply(1:250, function(x) if (genres_df[x, 1] %like% "War")1 else 0)
genres_df$Western = sapply(1:250, function(x) if (genres_df[x, 1] %like% "Western")1 else 0)
means <- rep(0,20)
for (i in 1:20) {
means[i] <- mean(as.numeric(genres_df$imDbRating[genres_df[i+2]==1]))
}
# plot the means
ge = c("Action", "Adventure", "Animation", "Biography", "Comedy", "Crime", "Drama", "Family", "Fantasy", "FilmNoir",
"History", "Horror", "Musical", "Mystery", "Romance", "SciFi", "Sport", "Thriller", "War", "Western")
barplot(means, main = "Average IMDb rating for different genres")
plotdf = as_tibble(means) %>% mutate("genre"=0)
plotdf$genre = ge
plotdf %>% mutate("maxi" = 0)
plotdf %>% mutate("mini" = 0)
ma <- rep(0,20)
for (i in 1:20) {
ma[i] <- max(as.numeric(genres_df$imDbRating[genres_df[i+2]==1]))
}
mi <- rep(0,20)
for (i in 1:20) {
mi[i] <- min(as.numeric(genres_df$imDbRating[genres_df[i+2]==1]))
}
plotdf$maxi = ma
plotdf$mini = mi
plotdf %>% ggplot(aes(genre, means))+ geom_bar(stat = "identity", width = 0.5, fill = "tomato3") +
labs(tittle = "Average IMDb rating for different genres") +
theme(axis.text.x = element_text(angle = 65, vjust = 0.6))
plotdf %>% ggplot(aes(genre, maxi))+ geom_bar(stat = "identity", width = 0.5, fill = "tomato3") +
labs(tittle = "Maximum IMDb rating for different genres") +
theme(axis.text.x = element_text(angle = 65, vjust = 0.6))
plotdf %>% ggplot(aes(genre, mini))+ geom_bar(stat = "identity", width = 0.5, fill = "tomato3") +
labs(tittle = "Minimum IMDb rating for different genres") +
theme(axis.text.x = element_text(angle = 65, vjust = 0.6))
library(data.table)
genres_df <- df_popu_ex %>% select(genre, imDbRating)
genres_df$Action = sapply(1:41, function(x) if (genres_df[x, 1] %like% "Action")1 else 0)
genres_df$Adventure = sapply(1:41, function(x) if (genres_df[x, 1] %like% "Adventure")1 else 0)
genres_df$Biography = sapply(1:41, function(x) if (genres_df[x, 1] %like% "Biography")1 else 0)
genres_df$Comedy = sapply(1:41, function(x) if (genres_df[x, 1] %like% "Comedy")1 else 0)
genres_df$Crime = sapply(1:41, function(x) if (genres_df[x, 1] %like% "Crime")1 else 0)
genres_df$Drama = sapply(1:41, function(x) if (genres_df[x, 1] %like% "Drama")1 else 0)
genres_df$Family = sapply(1:41, function(x) if (genres_df[x, 1] %like% "Family")1 else 0)
genres_df$Fantasy = sapply(1:41, function(x) if (genres_df[x, 1] %like% "Fantasy")1 else 0)
genres_df$Horror = sapply(1:41, function(x) if (genres_df[x, 1] %like% "Horror")1 else 0)
genres_df$Mystery = sapply(1:41, function(x) if (genres_df[x, 1] %like% "Mystery")1 else 0)
genres_df$Romance = sapply(1:41, function(x) if (genres_df[x, 1] %like% "Romance")1 else 0)
genres_df$SciFi = sapply(1:41, function(x) if (genres_df[x, 1] %like% "Sci-Fi")1 else 0)
genres_df$Sport = sapply(1:41, function(x) if (genres_df[x, 1] %like% "Sport")1 else 0)
genres_df$Thriller = sapply(1:41, function(x) if (genres_df[x, 1] %like% "Thriller")1 else 0)
genres_df$War = sapply(1:41, function(x) if (genres_df[x, 1] %like% "War")1 else 0)
means1 <- rep(0,15)
for (i in 1:15) {
means1[i] <- mean(as.numeric(genres_df$imDbRating[genres_df[i+2]==1]))
}
# plot the means
ge1 = c("Action", "Adventure", "Biography", "Comedy", "Crime", "Drama", "Family", "Fantasy",
"Horror", "Mystery", "Romance", "SciFi", "Sport", "Thriller", "War")
barplot(means1, main = "Average IMDb rating for different genres")
plotdf1 = as_tibble(means1) %>% mutate("genre"=0)
plotdf1$genre = ge1
plotdf1 %>% mutate("maxi" = 0)
plotdf1 %>% mutate("mini" = 0)
ma1 <- rep(0,15)
for (i in 1:15) {
ma1[i] <- max(as.numeric(genres_df$imDbRating[genres_df[i+2]==1]))
}
mi1 <- rep(0,15)
for (i in 1:15) {
mi1[i] <- min(as.numeric(genres_df$imDbRating[genres_df[i+2]==1]))
}
plotdf1$maxi = ma1
plotdf1$mini = mi1
plotdf1 %>% ggplot(aes(genre, means1))+ geom_bar(stat = "identity", width = 0.5, fill = "tomato3") +
labs(tittle = "Average IMDb rating for different genres") +
theme(axis.text.x = element_text(angle = 65, vjust = 0.6))
plotdf1 %>% ggplot(aes(genre, maxi))+ geom_bar(stat = "identity", width = 0.5, fill = "tomato3") +
labs(tittle = "Maximum IMDb rating for different genres") +
theme(axis.text.x = element_text(angle = 65, vjust = 0.6))
plotdf1 %>% ggplot(aes(genre, mini))+ geom_bar(stat = "identity", width = 0.5, fill = "tomato3") +
labs(tittle = "Minimum IMDb rating for different genres") +
theme(axis.text.x = element_text(angle = 65, vjust = 0.6))
plotdf1 %>% ggplot(aes(genre, means1))+ geom_bar(stat = "identity", width = 0.5, fill = "tomato3") +
labs(tittle = "Average IMDb rating for different genres") +
theme(axis.text.x = element_text(angle = 65, vjust = 0.6))
plotdf1 %>% ggplot(aes(genre, maxi))+ geom_bar(stat = "identity", width = 0.5, fill = "tomato3") +
labs(tittle = "Maximum IMDb rating for different genres") +
theme(axis.text.x = element_text(angle = 65, vjust = 0.6))
plotdf1 %>% ggplot(aes(genre, mini))+ geom_bar(stat = "identity", width = 0.5, fill = "tomato3") +
labs(tittle = "Minimum IMDb rating for different genres") +
theme(axis.text.x = element_text(angle = 65, vjust = 0.6))
plotdf %>% ggplot(aes(genre, means))+ geom_bar(stat = "identity", width = 0.5, fill = "tomato3") +
labs(tittle = "Average IMDb rating for different genres") +
theme(axis.text.x = element_text(angle = 65, vjust = 0.6))
plotdf %>% ggplot(aes(genre, maxi))+ geom_bar(stat = "identity", width = 0.5, fill = "tomato3") +
labs(tittle = "Maximum IMDb rating for different genres") +
theme(axis.text.x = element_text(angle = 65, vjust = 0.6))
plotdf %>% ggplot(aes(genre, mini))+ geom_bar(stat = "identity", width = 0.5, fill = "tomato3") +
labs(tittle = "Minimum IMDb rating for different genres") +
theme(axis.text.x = element_text(angle = 65, vjust = 0.6))
freq <- bind_rows(mutate(word_250, movie = "top 250"),
mutate(word_popu, movie = "popular")) %>%
mutate(word = str_extract(word, "[a-z]+")) %>% # exclude words in abnormal format, e.g. any'day
count(movie, word) %>%
group_by(movie) %>%
mutate(proportion = n / sum(n)) %>% # compute frequency after grouping
select(-n) # no need to look at n now
# create seperate columns for comparison
frequency <- freq %>% pivot_wider(names_from = "movie", values_from = "proportion")
frequency
# Plot proportions of words used in two movie lists:
ggplot(frequency, aes(x = `top 250`, y = `popular`)) +
geom_abline(color = "red", lty = 2, lwd = 2) +
geom_point(color = "grey") +
geom_text(aes(label = word), check_overlap = T) +
scale_x_log10() + scale_y_log10()
frequency %>% filter(!(`top 250` == "NA" | `popular` == "NA")) %>% select(,2:3) %>% cor()
head(df_250m_ex)
rate_vs_year_250m <- as.data.frame(cbind(as.numeric(df_250movies$imDbRating),as.numeric(df_250movies$year))
)
ggplot(rate_vs_year_250m, aes(x = V2, y = V1)) +
geom_point() +  xlab("Year") + ylab("Rating") +
labs(subtitle = "Year Vs Rating in top 250 movies", title = "Scatterplot", caption = "Source: df_250movies")
rate_vs_year_popum <- as.data.frame(cbind(as.numeric(df_popumovies$imDbRating),as.numeric(df_popumovies$year))
)
ggplot(rate_vs_year_popum, aes(x = V2, y = V1)) +
geom_point() +  xlab("Year") + ylab("Rating") +
labs(subtitle = "Year Vs Rating in popular movies", title = "Scatterplot", caption = "Source: df_popumovies")
rate_vs_count_250m <- as.data.frame(cbind(as.numeric(df_250movies$imDbRating),as.numeric(df_250movies$imDbRatingCount))
)
ggplot(rate_vs_year_250m, aes(x = V2, y = V1)) +
geom_point() +  xlab("Count") + ylab("Rating") +
labs(subtitle = "Count Vs Rating in top 250 movies", title = "Scatterplot", caption = "Source: df_250movies")
rate_vs_count_popum <- as.data.frame(cbind(as.numeric(df_popumovies$imDbRating),as.numeric(df_popumovies$imDbRatingCount))
)
ggplot(rate_vs_count_popum, aes(x = V2, y = V1)) +
geom_point() +  xlab("Count") + ylab("Rating") +
labs(subtitle = "Count Vs Rating in popular movies", title = "Scatterplot", caption = "Source: df_popumovies")
plotdf %>% ggplot(aes(genre, means))+ geom_bar(stat = "identity", width = 0.5, fill = "tomato3") +
xlab("New Genre") + ylab("Mean rating") +
labs(subtitle = "Genre Vs Rating in top 250 movies", title = "Barplot", caption = "Source: df_250m_ex") +
theme(axis.text.x = element_text(angle = 65, vjust = 0.6))
plotdf %>% ggplot(aes(genre, maxi))+ geom_bar(stat = "identity", width = 0.5, fill = "tomato3") +
xlab("New Genre") + ylab("Maximum rating") +
labs(subtitle = "Genre Vs Rating in top 250 movies", title = "Barplot", caption = "Source: df_250m_ex") +
theme(axis.text.x = element_text(angle = 65, vjust = 0.6))
plotdf %>% ggplot(aes(genre, mini))+ geom_bar(stat = "identity", width = 0.5, fill = "tomato3") +
xlab("New Genre") + ylab("Minimum rating") +
labs(subtitle = "Genre Vs Rating in top 250 movies", title = "Barplot", caption = "Source: df_250m_ex") +
theme(axis.text.x = element_text(angle = 65, vjust = 0.6))
library(data.table)
genres_df <- df_popu_ex %>% select(genre, imDbRating)
genres_df$Action = sapply(1:41, function(x) if (genres_df[x, 1] %like% "Action")1 else 0)
genres_df$Adventure = sapply(1:41, function(x) if (genres_df[x, 1] %like% "Adventure")1 else 0)
genres_df$Biography = sapply(1:41, function(x) if (genres_df[x, 1] %like% "Biography")1 else 0)
genres_df$Comedy = sapply(1:41, function(x) if (genres_df[x, 1] %like% "Comedy")1 else 0)
genres_df$Crime = sapply(1:41, function(x) if (genres_df[x, 1] %like% "Crime")1 else 0)
genres_df$Drama = sapply(1:41, function(x) if (genres_df[x, 1] %like% "Drama")1 else 0)
genres_df$Family = sapply(1:41, function(x) if (genres_df[x, 1] %like% "Family")1 else 0)
genres_df$Fantasy = sapply(1:41, function(x) if (genres_df[x, 1] %like% "Fantasy")1 else 0)
genres_df$Horror = sapply(1:41, function(x) if (genres_df[x, 1] %like% "Horror")1 else 0)
genres_df$Mystery = sapply(1:41, function(x) if (genres_df[x, 1] %like% "Mystery")1 else 0)
genres_df$Romance = sapply(1:41, function(x) if (genres_df[x, 1] %like% "Romance")1 else 0)
genres_df$SciFi = sapply(1:41, function(x) if (genres_df[x, 1] %like% "Sci-Fi")1 else 0)
genres_df$Sport = sapply(1:41, function(x) if (genres_df[x, 1] %like% "Sport")1 else 0)
genres_df$Thriller = sapply(1:41, function(x) if (genres_df[x, 1] %like% "Thriller")1 else 0)
genres_df$War = sapply(1:41, function(x) if (genres_df[x, 1] %like% "War")1 else 0)
means1 <- rep(0,15)
for (i in 1:15) {
means1[i] <- mean(as.numeric(genres_df$imDbRating[genres_df[i+2]==1]))
}
# plot the means
ge1 = c("Action", "Adventure", "Biography", "Comedy", "Crime", "Drama", "Family", "Fantasy",
"Horror", "Mystery", "Romance", "SciFi", "Sport", "Thriller", "War")
barplot(means1, main = "Average IMDb rating for different genres")
plotdf1 = as_tibble(means1) %>% mutate("genre"=0)
plotdf1$genre = ge1
plotdf1 %>% mutate("maxi" = 0)
plotdf1 %>% mutate("mini" = 0)
ma1 <- rep(0,15)
for (i in 1:15) {
ma1[i] <- max(as.numeric(genres_df$imDbRating[genres_df[i+2]==1]))
}
mi1 <- rep(0,15)
for (i in 1:15) {
mi1[i] <- min(as.numeric(genres_df$imDbRating[genres_df[i+2]==1]))
}
plotdf1$maxi = ma1
plotdf1$mini = mi1
plotdf1 %>% ggplot(aes(genre, means1))+ geom_bar(stat = "identity", width = 0.5, fill = "tomato3") +
xlab("New Genre") + ylab("Mean rating") +
labs(subtitle = "Genre Vs Rating in popular movies", title = "Barplot", caption = "Source: df_popu_ex") +
theme(axis.text.x = element_text(angle = 65, vjust = 0.6))
plotdf1 %>% ggplot(aes(genre, maxi))+ geom_bar(stat = "identity", width = 0.5, fill = "tomato3") +
xlab("New Genre") + ylab("Maximum rating") +
labs(subtitle = "Genre Vs Rating in popular movies", title = "Barplot", caption = "Source: df_popu_ex") +
theme(axis.text.x = element_text(angle = 65, vjust = 0.6))
plotdf1 %>% ggplot(aes(genre, mini))+ geom_bar(stat = "identity", width = 0.5, fill = "tomato3") +
xlab("New Genre") + ylab("Minimum rating") +
labs(subtitle = "Genre Vs Rating in popular movies", title = "Barplot", caption = "Source: df_popu_ex") +
theme(axis.text.x = element_text(angle = 65, vjust = 0.6))
freq <- bind_rows(mutate(word_250, movie = "top 250"),
mutate(word_popu, movie = "popular")) %>%
mutate(word = str_extract(word, "[a-z]+")) %>% # exclude words in abnormal format, e.g. any'day
count(movie, word) %>%
group_by(movie) %>%
mutate(proportion = n / sum(n)) %>% # compute frequency after grouping
select(-n) # no need to look at n now
# create seperate columns for comparison
frequency <- freq %>% pivot_wider(names_from = "movie", values_from = "proportion")
frequency
# Plot proportions of words used in two movie lists:
ggplot(frequency, aes(x = `top 250`, y = `popular`)) +
geom_abline(color = "red", lty = 2, lwd = 2) +
geom_point(color = "grey") +
geom_text(aes(label = word), check_overlap = T) +
scale_x_log10() + scale_y_log10()
frequency %>% filter(!(`top 250` == "NA" | `popular` == "NA")) %>% select(,2:3) %>% cor()
# ten most common bigrams in two lists
bigram_250 <- df_250m_ex %>% unnest_tokens(bigram, description, token = "ngrams", n = 2) %>%
filter(bigram != "NA")
library(tidytext)
library(tidyr)
bigram_250 <- df_250m_ex %>% unnest_tokens(bigram, description, token = "ngrams", n = 2) %>%
filter(bigram != "NA")
# Split out the words in a pair and delete the pairs with a stop word in them
bigram_250 %>% separate(bigram, c("word1", "word2"), sep = " ") %>%
filter(!word1 %in% stop_words$word) %>%    # Delete pairs with at least one stop word
filter(!word2 %in% stop_words$word) %>%
unite(bigram, word1, word2, sep = " ") %>%
count(bigram, sort = T)
bigram_popu <- df_popu_ex %>% unnest_tokens(bigram, description, token = "ngrams", n = 2) %>%
filter(bigram != "NA")
# Split out the words in a pair and delete the pairs with a stop word in them
bigram_popu %>% separate(bigram, c("word1", "word2"), sep = " ") %>%
filter(!word1 %in% stop_words$word) %>%    # Delete pairs with at least one stop word
filter(!word2 %in% stop_words$word) %>%
unite(bigram, word1, word2, sep = " ") %>%
count(bigram, sort = T)
tidy_movie <- bind_rows(mutate(word_250, movie = "top 250"),
mutate(word_popu, movie = "popular")) %>%
mutate(word = str_extract(word, "[a-z]+")) %>%
group_by(movie) %>%
select(word, movie, title, imDbRating)
tidy_movie
movie_sentiment <- tidy_movie %>%
inner_join(get_sentiments("bing")) %>%
count(movie, index = imDbRating, sentiment) %>%
spread(sentiment, n, fill = 0) %>%
mutate(sentiment = positive - negative)
ggplot(movie_sentiment, aes(index, sentiment, fill = movie)) +
geom_col(show.legend = FALSE) +
facet_wrap(~movie, ncol = 2, scales = "free_x")
